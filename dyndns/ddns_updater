#!/bin/sh
# HomeMade DynDNS Updater Script, with HTTPS/SSL Support. 
# A script to let your DDWRT router update your DNS records for any of your domain when it detects that your WAN IP changed.
# Note that it will only update the existing record's content and not add new record so make sure to manually add 'A' DNS records first
# This example uses Cloudflare's HTTPS/SSL URL update method to update the IP for example.com *.example.com and www.example.com.
# This script aims be to be run as a DDWRT cron job. i.e 0,10,20,30,40,50 * * * * root /opt/ddns/ddns_once &> /dev/null
# Edit the settings section to match your DNS provider, including the Domain, ZONE Ids and Record Ids.
# This script requires curl and its CA Bundle to be installed in $CA_BUNDLE path.
# made by zgorizzo@pm.me

### SETTINGS SECTION ###
# DDNS_DOMAIN_OBJECTS is a comma separated list of settings object containing fields as follow
# domain : ex. google.com
# CLOUDFLARE_ZONEID : zoneId corresponding to your domain as returned by the cloudflare API 
# # curl -X GET "https://api.cloudflare.com/client/v4/zones" \
#     -H "Authorization: Bearer PUT_CLOUDFLARE_BEARER_TOKEN_HERE" \
#     -H "Content-Type:application/json" \
#     | jq '.result[] | .id,.name'
# these fields should be seperated by @ i.e: DNS_DOMAIN_OBJECTS=whales.com@456dq6d4s6d54sddqaefqs,wall.tv@45754sd4fd2f57d7c811c17cf61
DDNS_DOMAIN_OBJECTS=domain1.com@ZONEID1,\
domain2.com@ZONEID2


# go to cloudflare api token and add one that can edit zone on your domains 
CLOUDFLARE_BEARER_TOKEN=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

# make sure to have a drive mounted for jffs and opt folders 
LOG_FILE=/jffs/log/ddns/dyndns.log 
CURL_LOG_FILE=/jffs/log/ddns/curl.log
CURL_LOCATION=/usr/bin/curl
CA_BUNDLE=/opt/ddns/cacert.pem


### FUNCTIONS SECTION ###
dns_patch() { 
	CUR_DDNS_RECORD_URL=$1
	DATA="{\"content\":\"${CURRENT_WAN_IP}\"}"
	$CURL_LOCATION \
		-X PATCH ${CUR_DDNS_RECORD_URL} \
		-H "Authorization: Bearer ${CLOUDFLARE_BEARER_TOKEN}" \
		-H "Content-Type:application/json" \
		--cacert ${CA_BUNDLE} \
		--data ${DATA} >> $CURL_LOG_FILE
}
### END SETTINGS SECTION
get_all_dns_records() { 
	ZONEID=$1
 
    RECORDS=$($CURL_LOCATION \
            -X GET "https://api.cloudflare.com/client/v4/zones/$ZONEID/dns_records?type=A" \
            -H "Authorization: Bearer ${CLOUDFLARE_BEARER_TOKEN}" \
            -H "Content-Type:application/json" \
            --cacert ${CA_BUNDLE} \
            | sed -n "/{/,/}/{s/[^:]*:[[:blank:]]*//p;}" \
            | sed -E 's/\},\s*\{/\},\n\{/g' \
            | grep  '"id":' \
            | cut -d : -f2 \
            | awk -F\" '{print $2}')


} 

update_one_dns_record() {
    ZONEID=$1
	RECID=$2
    CUR_DDNS_RECORD_URL="https://api.cloudflare.com/client/v4/zones/$ZONEID/dns_records/$RECID"
    echo -e "dns_patch $CUR_DDNS_RECORD_URL  \n" >> $LOG_FILE
    dns_patch $CUR_DDNS_RECORD_URL   
}

update_all_dns_records() { 
	ZONEID=$1
    get_all_dns_records $ZONEID 
    for RECID in $RECORDS
        do
            update_one_dns_record $ZONEID $RECID
    done


} 

get_dns_record_content() {
    ZONEID=$1
	RECID=$2
    CUR_RECORD_DETAIL=$($CURL_LOCATION \
            -X GET "https://api.cloudflare.com/client/v4/zones/$ZONEID/dns_records/$RECID" \
            -H "Authorization: Bearer ${CLOUDFLARE_BEARER_TOKEN}" \
            -H "Content-Type:application/json" \
            --cacert ${CA_BUNDLE})
    CUR_RECORD_CONTENT=$(echo $CUR_RECORD_DETAIL \
            | sed -n 's/.*\("content":[^}]*\).*/\1/p' \
            | cut -d : -f2 \
            | awk -F\" '{print $2}')
    CUR_RECORD_NAME=$(echo $CUR_RECORD_DETAIL \
            | sed -n 's/.*\("name":[^}]*\).*/\1/p' \
            | cut -d : -f2 \
            | awk -F\" '{print $2}')
}


check_to_update() {
    DOMAIN=$1
	ZONEID=$2
	WAN_IP=$3
	# beware that if the subdomain is proxied we will get the ip of the proxy server
 
	CURRENT_TIME=$(date)
    # get all the records from DNS	
	get_all_dns_records $ZONEID 
    # check that they are all equal to the current WAN IP
    for RECID in $RECORDS
        do
        get_dns_record_content $ZONEID $RECID
        echo -e "$CURRENT_TIME: check $CUR_RECORD_NAME IP:$CUR_RECORD_CONTENT against WAN_IP:$WAN_IP   \n"
        if [ "${WAN_IP}" != "${CUR_RECORD_CONTENT}" ]; then
            echo -e "$CURRENT_TIME: IP for domain:$CUR_RECORD_NAME has been changed from $CUR_RECORD_CONTENT to $WAN_IP \n" >> $LOG_FILE
            update_one_dns_record $ZONEID $RECID
            logger -p user.debug  "IP Registered for $CUR_RECORD_NAME changed from $CUR_RECORD_CONTENT to $WAN_IP"
        fi
    done 
}

### MAIN SECTION ###

## If your are in a DMZ for instance you can't get your wan IP but a local one with get wan_ipaddr
## you can use this command instead 
## CURRENT_WAN_IP=$(curl ifconfig.me) 

CURRENT_WAN_IP=$(nvram get wan_ipaddr) 

for obj in $(echo $DDNS_DOMAIN_OBJECTS | sed "s/,/ /g")
	do
	INDEX=0
	for field in $(echo $obj | sed "s/@/ /g")
	do
			if [ $INDEX = 0 ] 
			then
				CUR_DOMAIN=${field}
			elif [ $INDEX = 1 ] 
			then
				CUR_CLOUDFLARE_ZONEID=${field}
			fi
			let INDEX=${INDEX}+1
	done
	echo $CUR_DOMAIN $CUR_CLOUDFLARE_ZONEID $CURRENT_WAN_IP 
    check_to_update $CUR_DOMAIN $CUR_CLOUDFLARE_ZONEID $CURRENT_WAN_IP 
done