#!/bin/sh
# HomeMade DynDNS Updater Script, with HTTPS/SSL Support. 
# A script to let your DDWRT router update your DNS records for any of your domain when it detects that your WAN IP changed.
# This example uses Cloudflare's HTTPS/SSL URL update method to update the IP for example.com *.example.com and www.example.com.
# This script aims be to be run as a DDWRT cron job.
# Edit the settings section to match your DNS provider, including the Domain, ZONE Ids and Record Ids.
# This script requires curl and its CA Bundle to be installed in $CA_BUNDLE path.
# made by zgorizzo@pm.me

### SETTINGS SECTION ###
# DDNS_DOMAIN_OBJECTS is a comma separated list of settings object containing fields as follow
# domain : ex. google.com
# CLOUDFLARE_ZONEID : zoneId corresponding to your domain as returned by the cloudflare API 
# # curl -X GET "https://api.cloudflare.com/client/v4/zones" \
#     -H "Authorization: Bearer PUT_CLOUDFLARE_BEARER_TOKEN_HERE" \
#     -H "Content-Type:application/json" \
#     | jq '.result[] | .id,.name'
# WILDCARD_DNS_RECORDID: 'A' type dns record id for *.YOURDOMAIN.TLD as returned by the cloudflare API
# WWW_DNS_RECORDID: 'A' type dns record id for www.YOURDOMAIN.TLD as returned by the cloudflare API
# ROOT_DNS_RECORDID: 'A' type dns record id for YOURDOMAIN.TLD as returned by the cloudflare API
#	# curl -X GET "https://api.cloudflare.com/client/v4/zones/YOUR_DOMAIN_ZONE_ID/dns_records" \
#     -H "Authorization: Bearer PUT_CLOUDFLARE_BEARER_TOKEN_HERE" \
#     -H "Content-Type: application/json" \
#    | jq  '.result[]  | select( .type == "A" )  | .id,.name,.content'
# these field should be seperated by @
DDNS_DOMAIN_OBJECTS=domain1.com@ZONEID1@WILDCARD_RECORDID1@WWW_DNS_RECORDID1@ROOT_DNS_RECORDID1,\
domain2.com@ZONEID2@WILDCARD_RECORDID2@WWW_DNS_RECORDID2@ROOT_DNS_RECORDID2


# go to cloudflare api token and add one that can edit zone on your domains 
CLOUDFLARE_BEARER_TOKEN=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

 
LOG_FILE=/jffs/log/ddns/dyndns.log
CURL_LOG_FILE=/jffs/log/ddns/curl.log
CURL_LOCATION=/usr/bin/curl
CA_BUNDLE=/opt/ddns/cacert.pem


### FUNCTIONS SECTION ###
dns_update() {
	DDNS_DOMAIN=$1
	URL=$2
	SUBDOMAIN=$3
	if [ -z "$SUBDOMAIN" ]; then
		DNAME=${DDNS_DOMAIN}
	else
		DNAME=${SUBDOMAIN}.${DDNS_DOMAIN}
	fi
	DATA="{\"type\":\"A\",\"name\":\"${DNAME}\",\"content\":\"${CURRENT_WAN_IP}\"}"
	$CURL_LOCATION \
		-X PUT ${URL} \
		-H "Authorization: Bearer ${CLOUDFLARE_BEARER_TOKEN}" \
		-H "Content-Type:application/json" \
		--cacert ${CA_BUNDLE} \
		--data ${DATA} >>$CURL_LOG_FILE
}
### END SETTINGS SECTION
update_all_dns_records() {
	DOMAIN=$1
	ZONEID=$2
	WILDCARD_RECID=$3
	WWW_RECID=$4
	ROOT_RECID=$5

	echo $DOMAIN $ZONEID $WILDCARD_RECID $WWW_RECID $ROOT_RECID
	CUR_DDNS_WILDCARD_URL="https://api.cloudflare.com/client/v4/zones/$ZONEID/dns_records/$WILDCARD_RECID"
	CUR_DDNS_WWW_URL="https://api.cloudflare.com/client/v4/zones/$ZONEID/dns_records/$WWW_RECID"
	CUR_DDNS_ROOT_URL="https://api.cloudflare.com/client/v4/zones/$ZONEID/dns_records/$ROOT_RECID"
	dns_update $DOMAIN $CUR_DDNS_ROOT_URL
	dns_update $DOMAIN $CUR_DDNS_WILDCARD_URL "*"
	dns_update $DOMAIN $CUR_DDNS_WWW_URL "www"
}
check_to_update() {
    DOMAIN=$1
	ZONEID=$2
	WILDCARD_RECID=$3
	WWW_RECID=$4
	ROOT_RECID=$5
	WAN_IP=$6
    LAST_WAN_IP=$7
    
	# beware that if the subdomain is proxied we will get the ip of the proxy server
	RANDOM=$(head /dev/urandom | tr -dc "0123456789" | cut -c 1-8)
	DDNS_HOSTNAME="test${RANDOM}"
	CURRENT_TIME=$(date)	
	DNS_IP=$(nslookup $DDNS_HOSTNAME.$DOMAIN 173.245.58.65 | grep Address | tail -n 1 | awk '{print $3}')

	if [ -z "$DNS_IP" ]; then
		DNS_IP=$(nslookup $DDNS_HOSTNAME.$DOMAIN 173.245.58.65 | grep Address | tail -n 1 | awk '{print $2}')
	fi
	logger -p user.debug  "IP Registered for $DDNS_HOSTNAME.$DDNS_DOMAIN is $DNS_IP" 
	# Check if IP Address has changed from last locally stored IP
	if [ "${WAN_IP}" != "${LAST_WAN_IP}" ]; then
		echo "$CURRENT_TIME: IP has changed from $LAST_WAN_IP to $WAN_IP for domain:${DDNS_DOMAIN}" >>$LOG_FILE
		# Update the last locally stored IP
	    nvram set wan_ipaddr_last=${WAN_IP}
	    nvram commit
		update_all_dns_records $DOMAIN $ZONEID $WILDCARD_RECID $WWW_RECID $ROOT_RECID
		echo "$CURRENT_TIME: Updated DNS Service, server sent response:" >>$LOG_FILE
		echo -e "\n" >>$LOG_FILE
		cat $CURL_LOG_FILE >>$LOG_FILE
		echo -e "\n" >>$LOG_FILE
		rm $CURL_LOG_FILE
		logger -p user.warning "$CURRENT_TIME: Updated DNS Service IP has been changed from ${LAST_WAN_IP} to ${CURRENT_WAN_IP} for domain:${DDNS_DOMAIN}"
		continue

	# Check if IP Address has changed from what DNS is reporting
	elif [ "${WAN_IP}" != "${DNS_IP}" ]; then
		echo "$CURRENT_TIME: DNS IP not up to date, currently: $DNS_IP, but our IP is $WAN_IP for domain:${DDNS_DOMAIN}" >>$LOG_FILE
		update_all_dns_records $DOMAIN $ZONEID $WILDCARD_RECID $WWW_RECID $ROOT_RECID
		echo "$CURRENT_TIME: Updated DNS Service, server sent response:" >>$LOG_FILE
		echo -e "\n" >>$LOG_FILE
		cat $CURL_LOG_FILE >>$LOG_FILE
		echo -e "\n" >>$LOG_FILE
		rm $CURL_LOG_FILE
		logger -p user.warning "$CURRENT_TIME: Updated DNS : IP in registrar was not up to date it was ${DNS_IP} and was changed to ${CURRENT_WAN_IP} for domain:${DDNS_DOMAIN}"
	fi

}

### MAIN SECTION ###

CURRENT_WAN_IP=$(nvram get wan_ipaddr)
LAST_WAN_IP=$(nvram get wan_ipaddr_last)

for obj in $(echo $DDNS_DOMAIN_OBJECTS | sed "s/,/ /g")
	do
	INDEX=0
	for field in $(echo $obj | sed "s/@/ /g")
	do
			if [ $INDEX = 0 ] 
			then
				CUR_DOMAIN=${field}
			elif [ $INDEX = 1 ] 
			then
				CUR_CLOUDFLARE_ZONEID=${field}
			elif [ $INDEX = 2 ] 
			then
				CUR_CLOUDFLARE_WILDCARD_DNS_RECORDID=${field}
			elif [ $INDEX = 3 ] 
			then
				CUR_CLOUDFLARE_WWW_DNS_RECORDID=${field}
			elif [ $INDEX = 4 ] 
			then
				CUR_CLOUDFLARE_ROOT_DNS_RECORDID=${field}
			fi
			let INDEX=${INDEX}+1
	done
	echo $CUR_DOMAIN $CUR_CLOUDFLARE_ZONEID $CUR_CLOUDFLARE_WILDCARD_DNS_RECORDID $CUR_CLOUDFLARE_WWW_DNS_RECORDID $CUR_CLOUDFLARE_ROOT_DNS_RECORDID $CURRENT_WAN_IP $LAST_WAN_IP
    check_to_update $CUR_DOMAIN $CUR_CLOUDFLARE_ZONEID $CUR_CLOUDFLARE_WILDCARD_DNS_RECORDID $CUR_CLOUDFLARE_WWW_DNS_RECORDID $CUR_CLOUDFLARE_ROOT_DNS_RECORDID $CURRENT_WAN_IP $LAST_WAN_IP
done 